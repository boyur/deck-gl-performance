{"version":3,"sources":["Container.js","Count.js","Text.js","App.js","serviceWorker.js","index.js"],"names":["styled","div","_templateObject","Count_templateObject","Text_templateObject","styleLeftMap","position","top","left","bottom","right","styleRightMap","deckLayer","MapboxLayer","id","type","ScatterplotLayer","data","opacity","filled","getPosition","d","geometry","coordinates","getRadius","getColor","App","state","points","randomPoint","count","viewport","latitude","longitude","zoom","updatePints","_this","setState","setProps","features","window","requestAnimationFrame","this","_this2","react_default","a","createElement","Container","Count","value","onChange","e","target","min","max","step","Text","style","react_map_gl_esm","Object","assign","key","mapStyle","accessToken","onViewportChange","onClick","_ref","source","paint","circle-radius","circle-color","layer","PureComponent","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6XAEeA,UAAOC,IAAtBC,wVCAeF,UAAOC,IAAtBE,0KCAeH,UAAOC,IAAtBG,KCUMC,SAAe,CACnBC,SAAU,QACVC,IAAK,EACLC,KAAM,EACNC,OAAQ,EACRC,MAAO,QAGHC,EAAgB,CACpBL,SAAU,QACVC,IAAK,EACLC,KAAM,kBACNC,OAAQ,EACRC,MAAO,GAIHE,EAAY,IAAIC,IAAY,CAChCC,GAAI,SACJC,KAAMC,IACNC,KAAM,GACNC,QAAS,GACTC,QAAQ,EACRC,YAAa,SAAAC,GAAC,OAAIA,EAAEC,SAASC,aAC7BC,UAAW,IACXC,SAAU,CAAC,IAAK,EAAG,KAoFNC,6MAhFbC,MAAQ,CACNC,OAAQC,sBAAY,KACpBC,MAAO,IACPC,SAAU,CACRC,SAAU,EACVC,UAAW,EACXC,KAAM,MAIVC,YAAc,WACZ,IAAMP,EAASC,sBAAYO,EAAKT,MAAMG,OACtCM,EAAKC,SAAS,CAAET,WAChBhB,EAAU0B,SAAS,CAAErB,KAAMW,EAAOW,WAClCC,OAAOC,sBAAsBL,EAAKD,iGAIlCK,OAAOC,sBAAsBC,KAAKP,8CAG3B,IAAAQ,EAAAD,KACP,OACEE,EAAAC,EAAAC,cAACC,EAAD,KACEH,EAAAC,EAAAC,cAACE,EAAD,KACEJ,EAAAC,EAAAC,cAAA,qBAAaJ,KAAKf,MAAMG,OACxBc,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SACE/B,KAAK,QACLkC,MAAOP,KAAKf,MAAMG,MAClBoB,SAAU,SAACC,GAAQR,EAAKN,SAAS,CAAEP,OAAQqB,EAAEC,OAAOH,SACpDI,IAAK,EACLC,IAAK,IACLC,KAAM,QAIZX,EAAAC,EAAAC,cAACU,EAAD,CAAMC,MAAO,CAAEjD,KAAM,sBAArB,gBAGAoC,EAAAC,EAAAC,cAACU,EAAD,CAAMC,MAAO,CAAE/C,MAAO,sBAAtB,WAGAkC,EAAAC,EAAAC,cAACY,EAAA,EAADC,OAAAC,OAAA,CACEC,IAAI,OACJJ,MAAOpD,EACPyD,SAAS,kCACTC,YAAY,gGACZC,iBAAkB,SAAAjC,GAAQ,OAAIY,EAAKN,SAAS,CAAEN,cAC9CkC,QAAS,kBAAMtB,EAAKN,SAAS,SAAA6B,GAAA,MAAgB,CAC3CpC,MAD2BoC,EAAGpC,MACf,SAEbY,KAAKf,MAAMI,UAEfa,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAQ5C,GAAG,SAASC,KAAK,UAAUE,KAAMyB,KAAKf,MAAMC,SACpDgB,EAAAC,EAAAC,cAACY,EAAA,EAAD,CACE5C,GAAG,SACHC,KAAK,SACLoD,OAAO,SACPC,MAAO,CACLC,gBAAiB,EACjBC,eAAgB,cAItB1B,EAAAC,EAAAC,cAACY,EAAA,EAADC,OAAAC,OAAA,CACEC,IAAI,QACJJ,MAAO9C,EACPmD,SAAS,kCACTC,YAAY,gGACZC,iBAAkB,SAAAjC,GAAQ,OAAIY,EAAKN,SAAS,CAAEN,eAC1CW,KAAKf,MAAMI,UAEfa,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAaa,MAAO3D,aA1EZ4D,iBC5BEC,QACW,cAA7BjC,OAAOkC,SAASC,UAEe,UAA7BnC,OAAOkC,SAASC,UAEhBnC,OAAOkC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b35307f3.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport default styled.div`\n  display: block;\n  position: relative;\n  width: 100vw;\n  height: 100vh;\n`;\n","import styled from 'styled-components';\n\nexport default styled.div`\n  position: absolute;\n  width: 300px;\n  top: 30px;\n  left: 30px;\n  font-size: 30px;\n  font-weight: bold;\n  z-index: 2;\n  background: white;\n  box-shadow: 0 0 10px rgba(0,0,0,0.5);\n  padding: 10px;\n  border-radius: 5px;\n  \n  input {\n    width: 100%;\n  }\n`;\n","import styled from 'styled-components';\n\nexport default styled.div`\n  position: absolute;\n  top: 30px;\n  font-size: 30px;\n  font-weight: bold;\n  z-index: 2;\n`;\n","import React, { PureComponent } from 'react';\nimport { randomPoint } from '@turf/random';\nimport MapGL, { Source, Layer, CustomLayer } from '@urbica/react-map-gl';\nimport { MapboxLayer } from '@deck.gl/mapbox';\nimport { ScatterplotLayer } from '@deck.gl/layers';\n\nimport Container from './Container';\nimport Count from './Count';\nimport Text from './Text';\n\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\nconst styleLeftMap = {\n  position: 'fixed',\n  top: 0,\n  left: 0,\n  bottom: 0,\n  right: '50%'\n};\n\nconst styleRightMap = {\n  position: 'fixed',\n  top: 0,\n  left: 'calc(50% + 3px)',\n  bottom: 0,\n  right: 0\n};\n\n\nconst deckLayer = new MapboxLayer({\n  id: 'points',\n  type: ScatterplotLayer,\n  data: [],\n  opacity: 0.8,\n  filled: true,\n  getPosition: d => d.geometry.coordinates,\n  getRadius: 200000,\n  getColor: [255, 0, 0]\n});\n\nclass App extends PureComponent {\n  state = {\n    points: randomPoint(1000),\n    count: 100,\n    viewport: {\n      latitude: 0,\n      longitude: 0,\n      zoom: 0\n    }\n  };\n\n  updatePints = () => {\n    const points = randomPoint(this.state.count);\n    this.setState({ points });\n    deckLayer.setProps({ data: points.features });\n    window.requestAnimationFrame(this.updatePints);\n  };\n\n  componentDidMount() {\n    window.requestAnimationFrame(this.updatePints);\n  }\n\n  render() {\n    return (\n      <Container>\n        <Count>\n          <div>Count: {this.state.count}</div>\n          <div>\n            <input\n              type='range'\n              value={this.state.count}\n              onChange={(e) => { this.setState({ count: +e.target.value })}}\n              min={0}\n              max={30000}\n              step={100}\n            />\n          </div>\n        </Count>\n        <Text style={{ left: 'calc(50% - 230px)'}}>\n          Mapbox GL JS\n        </Text>\n        <Text style={{ right: 'calc(50% - 130px)'}}>\n          deck.gl\n        </Text>\n        <MapGL\n          key='left'\n          style={styleLeftMap}\n          mapStyle='mapbox://styles/mapbox/light-v9'\n          accessToken='pk.eyJ1IjoiYm95dXJhcnRlbSIsImEiOiJjajBkeWY4ZmwwMDEyMzJseG8wZDI4YW5pIn0.DBEWyIXo3VknCRDcqa7Msg'\n          onViewportChange={viewport => this.setState({ viewport })}\n          onClick={() => this.setState(({ count }) => ({\n            count: count + 1000\n          }))}\n          {...this.state.viewport}\n        >\n          <Source id='points' type='geojson' data={this.state.points} />\n          <Layer\n            id='points'\n            type='circle'\n            source='points'\n            paint={{\n              'circle-radius': 5,\n              'circle-color': '#1978c8'\n            }}\n          />\n        </MapGL>\n        <MapGL\n          key='right'\n          style={styleRightMap}\n          mapStyle='mapbox://styles/mapbox/light-v9'\n          accessToken='pk.eyJ1IjoiYm95dXJhcnRlbSIsImEiOiJjajBkeWY4ZmwwMDEyMzJseG8wZDI4YW5pIn0.DBEWyIXo3VknCRDcqa7Msg'\n          onViewportChange={viewport => this.setState({ viewport })}\n          {...this.state.viewport}\n        >\n          <CustomLayer layer={deckLayer} />\n        </MapGL>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}